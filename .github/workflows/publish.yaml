name: Publish

on:
  pull_request:
    types: [closed]
    branches:
      # note: only for dev branch since we need to release packages only once
      - dev

permissions: write-all

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup node"
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
          registry-url: https://npm.pkg.github.com
          node-version: "18.15.0"

      - name: "Setup npm"
        run: |
          # To deploy the application with the latest changes, packages versions must be up to date.
          npm set @zidabah:registry=https://npm.pkg.github.com
          npm set "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}"

      - name: "Install dependencies"
        run: |
          npm ci

      - name: "Version and publish"
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor}}@users.noreply.github.com"

          # To deploy the application with the latest changes, packages versions must be up to date.
          npx lerna version --conventional-commits --no-push --no-changelog --yes
          npx lerna publish from-git --yes

      - name: "Update package.json with latest library version"
        run: |
          # To deploy the application with the latest changes, packages versions must be up to date.
          package_names=("date-renderer" "date-logic") # List of package names to update
          
          # To deploy the application with the latest changes, packages versions must be up to date.
          for pkg in "${package_names[@]}"; do
            latest_version=$(npm view "@zidabah/$pkg" version)
            jq --arg latest_version "$latest_version" ".dependencies[\"@zidabah/$pkg\"] = \$latest_version" package.json > package.json.tmp
            mv package.json.tmp package.json
          done

      - name: "Commit and push changes"
        run: |
  
          # To deploy the application with the latest changes, packages versions must be up to date.
          git add package.json
          git commit --amend -m "Update libraries to the latest version"
          git push --atomic --tags